\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Ring
\import Arith.Int
\import Arith.Nat
\import Data.Bool
\import HLevel
\import Logic
\import Logic.Meta
\open Nat
\import Order.LinearOrder
\import Paths
\import Paths.Meta
-------------------
\import first.mod_n_ok (div_a*n_a=n, mod_a*n_a=0)
\import first.eq_ok
\import first.leq_ok

\func \infixr 3 && (P Q : \Type) => \Sigma P Q

{- ### <= ### -}

\func <=-bool (a b : Nat) : Bool
  | 0, 0 => true
  | 0, suc b => true
  | suc a, 0 => false
  | suc a, suc b => <=-bool a b

\func <=-bool-to-<= {a b : Nat} (p : <=-bool a b = true) : a <= b
  | {0}, {0}, p => zero<=_
  | {0}, {suc b}, p => zero<=_
  | {suc a}, {suc b}, p => <=-+C (<=-bool-to-<= {a} {b} (p)) 1

\func <=-to-<=-bool {a b : Nat} (p : a <= b) : <=-bool a b = true
  | {0}, {0}, zero<=_ => idp
  | {0}, {suc b}, zero<=_ => idp
  | {suc a}, {suc b}, suc<=suc p => <=-to-<=-bool p

\func <=-to-<=-bool-f {a b : Nat} (p : suc a <= b) : <=-bool b a = false
  | {0}, {suc b}, suc<=suc p => idp
  | {suc a}, {suc b}, suc<=suc p => <=-to-<=-bool-f {a} {b} p

\func <=-bool-to-<=-f {a b : Nat} (p : <=-bool b a = false) : suc a <= b =>
  <=-bool-to-<= (<=-bool-inv-ext p)

\func <=-bool-inv {a b : Nat}  (p : <=-bool a b = false) : (<=-bool b a = true)
  | {0}, {0}, ()
  | {suc a}, {0}, p => idp
  | {suc a}, {suc b}, p => <=-bool-inv p

\func <=-bool-inv-ext {a b : Nat}  (p : <=-bool a b = false) : (<=-bool (suc b) a = true)
  | {0}, {0}, ()
  | {suc a}, {0}, p => (<=-to-<=-bool zero<=_)
  | {suc a}, {suc b}, p => <=-bool-inv-ext p

-----------------------------------------------------------------------------------------
{- ### mod ### -}

\func mod_a_b<=b (a b : Nat) (p : 1 <= b) : (mod a b <= b) \elim b
  | suc b => NatLE.<=-transitive (a<=suc_a) (modProp a {suc b} (_1<=suc_a b))

\func mod_a_b<b (a b : Nat) (p : 1 <= b) : (suc (mod a b) <= b) \elim b
  | suc b => (modProp a {suc b} (_1<=suc_a b))

\func mod0_a=0 {a : Nat} : mod 0 a = 0
  | {0} => idp
  | {a} => a<=0=>a=0 (NatLE.<=-transitive (<=_0_+-left (a * div 0 a)) (=to<= (divModProp 0 a)))

\func moda_a=0 {a : Nat} : mod a a = 0
  | {0} => idp
  | {suc a'} => \let | a => suc a' \in
    rewriteF ((l2 (_1<=suc_a a'))) (moda_b=a-b*diva_b a a) *> -'id a'
  \where {
    \func l1 {a : Nat} (p : 1 <= a) : div a a = 1 =>
      rewriteF (+-comm : a * 1 = a) (div_a*n_a=n 1 (p : 1 <= a))

    \func l2 {a : Nat} (p : 1 <= a) : a * div a a = a =>
      pmap (\lam x => a * x) (l1 p) *> (NatSemiring.+-comm)
  }

\func moda_b=a-b*diva_b (a b : Nat) : mod a b = a -' b * div a b =>
  (+-=-> {mod a b} {b * div a b} {a} (NatSemiring.+-comm *> divModProp a b)).1

\func a-'b+b=a (a b : Nat) (p : b <= a) : (a -' b) + b = a
  | 0, 0, zero<=_ => idp
  | suc a, 0, zero<=_ => idp
  | suc a, suc b, suc<=suc p => pmap suc (a-'b+b=a a b p)

\func a+b-'b=a (a b : Nat) : (a + b) -' b = a
  | 0, 0 => idp
  | 0, suc b => rewrite (+-comm : 0 + b = b + 0) (-'id b)
  | suc a, 0 => idp
  | suc a, suc b => inv (l1 a b) *> pmap suc (a+b-'b=a a b)
  \where {
    \func l1 (a b : Nat) : suc ((a + b) -' b) = (suc a + b) -' b =>
      rewriteI (l3 a b) (l2 (a + b) b (<=_0_+-left a : b <= a + b))

    \func l2 (a b : Nat) (p : b <= a) : suc (a -' b) = suc a -' b
      | 0, 0, zero<=_ => idp
      | suc a, 0, zero<=_ => idp
      | suc a, suc b, suc<=suc p => l2 a b p

    \func l3 (a b : Nat) : suc (a + b) = (a + 1) + b =>
      NatSemiring.+-assoc {a} {b} {1} -- a + (b + 1)
        *> pmap (\lam x => a + x) (NatSemiring.+-comm {b} {1}) -- a + (b + 1) = a + (1 + b)
             *> inv (NatSemiring.+-assoc {a} {1} {b})
  }

\func +-=->
  {a b c : Nat}
  (p : a + b = c)
  : (a = c -' b) && (b <= c) =>
  (rewriteF (-'id b : b -' b = 0)
       ( (rewrite (-'id b) (idp)
       : a + (b -' b) = a)
         *>
       (inv (a+b-'b=a a b)
       : a = (a + b) -' b)
         *>
       (pmap (\lam x => x -' b) p
       : (a + b) -' b = c -' b)
       : a + (b -' b) = c -' b)
   : a + 0 = c -' b
  , rewriteF (p) (<=_0_+-left {b} a : b <= a + b)
  )

\func +-=<-
  {a b c : Nat}
  (p : a = c -' b)
  (q : b <= c)
  : (a + b = c) =>
  pmap (\lam x => x + b) p *> a-'b+b=a c b q

-----------------------------------------------------------------------------------------
{- ### gcd ### -}

\func gcd (a b : Nat) : Nat => m a b (<=-bool a b) idp
  \where {
    \func m (a b : Nat) (p : Bool) (q : <=-bool a b = p) : Nat \elim p
      | true => gcd-helper a b (<=-bool-to-<= q)
      | false => gcd-helper b a (<=-bool-to-<= (<=-bool-inv q))
  }

\func gcd-helper (a b : Nat) (p : a <= b) : Nat =>
  gcd-helper-n a b a p (=to<= idp)

\func gcd-helper-n (a b : Nat) (n : Nat) (p : a <= b) (q : a <= n) : Nat
  | 0, b, n, p, q => b
  | suc a', b, suc n, p, q =>
    \let | a => suc a' \in
      gcd-helper-n (mod b a) a n
          (mod_a_b<=b b a (_1<=suc_a a' : 1 <= a): mod b a <= a)
          (p1 a b n q (_1<=suc_a a' : 1 <= a) : mod b a <= n) -- mod b a
  \where {
    \func p1 (a b n : Nat) (p : a <= suc n) (q : 1 <= a) : mod b a <= n =>
      <=-pred-i (NatLE.<=-transitive
          (mod_a_b<b b a (q : 1 <= a) : suc (mod b a) <= a)
          (p : a <= suc n))
  }

-----------------------------------------------------------------------------------------
{- ### property 1 ### -}

\func gcd-isDivider
  (a b : Nat)
  : (mod b (gcd a b) = 0) && (mod a (gcd a b) = 0) =>
  \case <=-bool a b \as less,
        idp \as id : <=-bool a b = less
  \with {
    | true, id => transport (\lam x => (mod b x = 0) && (mod a x = 0))
        (inv (link-a<=b-bool a b (id)))
        (gcd-isDivider-helper a b (<=-bool-to-<= id))
    | false, id =>
      \let | rec => (gcd-isDivider-helper b a (<=-bool-to-<= (<=-bool-inv id))) \in
        transport (\lam x => (mod b x = 0) && (mod a x = 0))
            (inv (link-b<a-bool a b id))
            (rec.2, rec.1)
  }

\func gcd-isDivider-helper
  (a b : Nat)
  (p : a <= b)
  : (mod b (gcd-helper a b p) = 0) && (mod a (gcd-helper a b p) = 0) =>
  gcd-isDivider-helper-n a b a p (=to<= idp)

\func gcd-isDivider-helper-n
  (a b : Nat)
  (n : Nat)
  (p : a <= b)
  (q : a <= n)
  : (mod b (gcd-helper-n a b n p q) = 0) && (mod a (gcd-helper-n a b n p q) = 0)
  | 0, b, n, p, q => (moda_a=0, mod0_a=0)
  | suc a', b, suc n, p, q =>
    \let | a => suc a' \in
      up_mod
          (gcd-isDivider-helper-n (mod b a) a n
              (mod_a_b<=b b a (_1<=suc_a a' : 1 <= a): mod b a <= a)
              (gcd-helper-n.p1 a b n q (_1<=suc_a a' : 1 <= a) : mod b a <= n)) -- mod b a
  \where {
    \func up_mod {a b c : Nat} (p : (mod a c = 0) && (mod (mod b a) c = 0))
      : (mod b c = 0) && (mod a c = 0) => (up p.1 p.2, p.1)
      \where {
        \func up {a b c : Nat} (p : mod a c = 0) (q : mod (mod b a) c = 0) : mod b c = 0 =>
          mod_c*k=b
              (NatSemiring.ldistr c (div a c * div b a) (div (mod b a) c) *>
              (rewriteF (NatSemiring.*-assoc)
                  (rewriteF (div_if_mod=0 q)
                      (rewriteF (pmap (\lam x => x * div b a) (div_if_mod=0 p)) (divModProp b a)
                      : c * div a c * div b a + (divMod b a).2 = b)
                  : c * div a c * div b a + c * div (divMod b a).2 c = b)
              : c * (div a c * div b a) + c * div (divMod b a).2 c = b)
              : c * (div a c * div b a + div (divMod b a).2 c) = b)

        \func div_if_mod=0 {a c : Nat} (p : mod a c = 0) : a = c * div a c =>
          inv (rewriteF p (divModProp a c))

        \func mod_c*k=b {c k b : Nat} (p : c * k = b) : mod b c = 0 =>
          rewriteF p (mod_a*n_a=0 c k)
      }
  }

-----------------------------------------------------------------------------------------
{- ### property 2 ### -}

\func gcd>=any_other_common_divider
  (a b c : Nat)
  (am : mod a c = 0)
  (bm : mod b c = 0)
  : (mod (gcd a b) c = 0) =>
  \case <=-bool a b \as less,
        idp \as id : <=-bool a b = less
  \with {
    | true, id => transport (\lam x => mod x c = 0)
        (inv (link-a<=b-bool a b id))
        (gcd>=any_other_common_divider-helper a b c (<=-bool-to-<= id) am bm)
    | false, id =>
      transport (\lam x => mod x c = 0)
          (inv (link-b<a-bool a b id))
          (gcd>=any_other_common_divider-helper b a c (<=-bool-to-<= (<=-bool-inv id)) bm am)
  }

\func gcd>=any_other_common_divider-helper
  (a b c : Nat)
  (p : a <= b)
  (am : mod a c = 0)
  (bm : mod b c = 0)
  : (mod (gcd-helper a b p) c = 0) => gcd>=any_other_common_divider-helper-n a b c a p (=to<= idp) am bm

\func gcd>=any_other_common_divider-helper-n
  (a b c : Nat)
  (n : Nat)
  (p : a <= b)
  (q : a <= n)
  (am : mod a c = 0)
  (bm : mod b c = 0)
  : (mod (gcd-helper-n a b n p q) c = 0)
  | 0, b, c, n, p, q, am, bm => bm
  | suc a', b, c, suc n, p, q, am, bm =>
    \let | a => suc a' \in
      gcd>=any_other_common_divider-helper-n (mod b a) a c n
          (mod_a_b<=b b a (_1<=suc_a a' : 1 <= a): mod b a <= a)
          (gcd-helper-n.p1 a b n q (_1<=suc_a a' : 1 <= a) : mod b a <= n) -- mod b a
          (gcd-isDivider-seq-simple {a} {b} {c} p am bm : mod (mod b a) c = 0)
          am

--\func gcd-isDivider-seq-simple
--  {a b c : Nat}
--  (l : a <= b)
--  (p : mod a c = 0)
--  (q : mod b c = 0)
--  : (mod (mod b a) c = 0) => {?}

-----------------------------------------------------------------------------------------
{- ### link ### -}

\func link-a<=b-bool (a b : Nat) (p : <=-bool a b = true) : gcd a b = gcd-helper a b (<=-bool-to-<= p) =>
  \case <=-bool a b \as less,
        idp \as id : <=-bool a b = less
  \return gcd.m a b less id = gcd-helper a b (<=-bool-to-<= p)
  \with {
    | true, id => gcd-helper-any-<= a b (<=-bool-to-<= id) (<=-bool-to-<= p)
    | false, id => contradiction {inv p *> id}
  }

\func link-b<a-bool (a b : Nat) (p : <=-bool a b = false)
  : gcd a b = gcd-helper b a (<=-bool-to-<= (<=-bool-inv p)) =>
  \case <=-bool a b \as less,
        idp \as id : <=-bool a b = less
  \return gcd.m a b less id = gcd-helper b a (<=-bool-to-<= (<=-bool-inv p))
  \with {
    | false, id => gcd-helper-any-<= b a (<=-bool-to-<= (<=-bool-inv id)) (<=-bool-to-<= (<=-bool-inv p))
    | true, id => contradiction {inv p *> id}
  }

\func gcd-helper-any-<= (a b : Nat) (p : a <= b) (q : a <= b) :
  gcd-helper a b p = gcd-helper a b q
  | 0, 0, zero<=_, zero<=_ => idp
  | 0, suc b, zero<=_, zero<=_ => idp
  | suc a, suc b, suc<=suc p, suc<=suc q => idp

-----------------------------------------------------------------------------------------
\func gcd-isDivider-seq-simple
  {a b c : Nat}
  (l : a <= b)
  (p : mod a c = 0)
  (q : mod b c = 0)
  : (mod (mod b a) c = 0) =>
  f2 (mod b a) (div b a * div a c) (div b c) c
      (transport2
          (\lam x y => mod b a + x = y)
          ((NatSemiring.*-comm *>
          (pmap (\lam x => div b a * x) (
            mod_b_c=0=>b=div_b_c*c a c p : a = div a c * c
          ) : (div b a) * a = div b a * (div a c * c)) *>
          (inv NatSemiring.*-assoc : div b a * (div a c * c) = (div b a * div a c) * c)
           )
          : a * (div b a) = (div b a * div a c) * c)
            (mod_b_c=0=>b=div_b_c*c b c q
          : b = div b c * c)
          (NatSemiring.+-comm *> divModProp b a : mod b a + a * (div b a) = b))

\func mod_b_c=0=>b=div_b_c*c
  (b c : Nat) (q : mod b c = 0) : b = div b c * c =>
      ((transport
          (\lam x => b = c * div b c + x)
          (q)
          (inv (divModProp b c)) : b = c * div b c) *>
      (NatSemiring.*-comm : c * div b c = div b c * c)
      : b = div b c * c)

\func f2
  (a b c d : Nat)
  (p : a + b * d = c * d)
  : (mod a d = 0)
  | a, 0, c, d, p =>
    \let | eq => ((pmap (\lam x => a + x) (NatSemiring.*-comm) : a = a + 0 * d) *> (p : a + 0 * d = c * d)
    : a = c * d)
         | eq2 => (eq *> NatSemiring.*-comm : a = d * c)
    \in transport (\lam x => mod x d = 0) (inv eq2) (mod_a*n_a=0 d c : mod (d * c) d = 0)
  | a, suc b, suc c, d, p => f2 a b c d
      (f6 {a} {b * d} {c * d} {1 * d} (transport2 (\lam x y => a + x = y)
          (NatSemiring.rdistr b 1 d : (b + 1) * d = b * d + 1 * d)
          (NatSemiring.rdistr c 1 d : (c + 1) * d = c * d + 1 * d)
          p
      : (a + (b * d + 1 * d) = c * d + 1 * d)))
  | a, b, 0, d, p => --
    transport (\lam x => mod x d = 0)
      (inv (a+b=0=>a=0 {a} {b * d} (rewriteF (NatSemiring.*-comm : 0 * d = 0) p) : a = 0))
      (mod0_a=0 : mod 0 d = 0)

\func f6
  {a b c d : Nat}
  (p : a + (b + d) = c + d)
  : a + b = c =>
  f7 {a + b} {c} {d} ((NatSemiring.+-assoc : (a + b) + d = a + (b + d)) *> (p : a + (b + d) = c + d))

\func f7
  {a b c : Nat}
  (p : a + c = b + c)
  : a = b => (inv (a+b-'b=a a c)) *> (pmap (\lam x => x -' c) p) *> (a+b-'b=a b c)


