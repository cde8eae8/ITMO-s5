\import Arith.Nat
\import Logic
\import Logic.Meta
\import Paths
\open Nat

\import first.eq_ok

-- <=
\func <=-pmap  {a b c d : Nat} (p : a <= b) (l : a = c) (r : b = d) : c <= d =>
  transport2 (\lam x y => x <= y) l r p

\func <=-transportR {a b c : Nat} (p : a <= b) (q : b = c) : (a <= c) =>
  transport (\lam x => a <= x) q p

\func <=-transportL {a b c : Nat} (p : a <= b) (q : a = c) : (c <= b) =>
  transport (\lam x => x <= b) q p

\func =to<= {a b : Nat} (p : a = b) : a <= b
  | {0}, {0}, p => zero<=_
  | {suc a}, {suc b}, p => suc<=suc (=to<= (pmap pred p))

\func <=-inverse {a b : Nat} (p : Not (suc a <= b)) : (b <= a)
  | {0}, {suc b}, p => contradiction {p ((<=_+ {0} {b} {1} {1} (zero<=_) (=to<= idp)) : suc 0 <= suc b)}
  | {suc a}, {suc b}, p => <=_+ (<=-inverse {a} {b} (\lam x' => p (<=_+ x' (=to<= idp : 1 <= 1)))) (=to<= idp : 1 <= 1)
  | {0}, {0}, p => zero<=_
  | {suc a}, {0}, p => zero<=_

\func <=-+C {a b : Nat} (q : a <= b) (c : Nat) : a + c <= b + c =>
  <=_+ q (=to<= idp : c <= c)

\func <=-mul (a : Nat) {b c : Nat} (p : b <= c) : a * b <= a * c
  | a, {suc b}, {suc c}, suc<=suc p => <=_+ (<=-mul a p) (=to<= idp)
  | a, {0}, p => zero<=_

\func <=-pred-i {a b : Nat} (p : suc a <= suc b) : a <= b
  | {0}, {0}, suc<=suc p => zero<=_
  | {0}, {suc b}, suc<=suc p => zero<=_
  | {suc a}, {0}, suc<=suc p => p
  | {suc a}, {suc b}, suc<=suc p => (<=-+C (<=-pred-i {a} {b} p) 1)

\func <=-+_drop_a {a b c : Nat} (p : a + b <= a + c) : b <= c
  -- a' + b <= a' + c => a + b <= a + c
  | {suc a}, {b}, {c}, p => <=-+_drop_a {a} {b} {c}
      (<=-pred-i (<=-pmap p up' up'))
  | {0}, {b}, {c}, p => <=-pmap p (NatSemiring.+-comm) (NatSemiring.+-comm)
  \where {
    \func up' {a b : Nat} : suc a + b = suc (a + b) =>
      NatSemiring.+-comm *> NatSemiring.+-assoc {b} {a} {1} *> pmap suc NatSemiring.+-comm
  }

\func <=-+_add_a {a b c : Nat} (p : b <= c) : a + b <= a + c
  -- a' + b <= a' + c => a + b <= a + c
  | {suc a}, {b}, {c}, p => <=-pmap (<=-+C (<=-+_add_a {a} {b} {c} p) 1) (inv up') (inv up')
  | {0}, {b}, {c}, p => <=-pmap p (NatSemiring.+-comm) (NatSemiring.+-comm)
  \where {
    \func up' {a b : Nat} : suc a + b = suc (a + b) =>
      NatSemiring.+-comm *> NatSemiring.+-assoc {b} {a} {1} *> pmap suc NatSemiring.+-comm
  }

\func <=-mul-i {a : Nat} {b c : Nat} (q : 1 <= a) (p : a * b <= a * c) : b <= c
  | {suc a}, {0}, {0}, suc<=suc q, zero<=_ => zero<=_
  | {suc a}, {0}, {suc c}, suc<=suc q, zero<=_ => zero<=_
  | {suc a}, {suc b}, {suc c}, q, suc<=suc p => <=-+C
      (<=-mul-i {suc a} {b} {c} q
          (<=-+_drop_a (<=-pmap p NatSemiring.+-comm NatSemiring.+-comm : a + suc a * b <= a + suc a * c))) 1

\func <=-*_add_a {a : Nat} {b c : Nat} (p : b <= c) : a * b <= a * c
  | {a}, {suc b}, {suc c}, suc<=suc p => (<=-+C (<=-*_add_a {a} {b} {c} p) a : a * b + a <= a * c + a)
  | {a}, {0}, p => zero<=_

\lemma _1<=suc_a (a : Nat) : (1 <= suc a)
  | 0 => suc<=suc zero<=_
  | suc a => NatLE.<=-transitive (_1<=suc_a a) (<=-suc)

\func !a=b&a<b {a b : Nat} (p : a = b) (q : suc a <= b) : Empty
  | {0}, {0}, p, ()
  | {suc a}, {suc b}, p, suc<=suc q => !a=b&a<b {a} {b} (a'=b'=>a=b p) q

\func a<=b&a>b {a b : Nat} (p : a <= b) (q : suc b <= a) : Empty
  | {0}, {0}, p, ()
  | {suc a}, {suc b}, p, suc<=suc q => a<=b&a>b {a} {b} (<=-pred-i p) q

\func a<=suc_a {a : Nat} : (a <= suc a)
  | {0} => zero<=_
  | {suc a} => suc<=suc a<=suc_a

\func a<=b&a!=b=>a'<=b {a b : Nat} (a<=b : a <= b) (a!=b : Not (a = b)) : suc a <= b
  | {0}, {0}, zero<=_, a!=b => contradiction
  | {0}, {suc b}, zero<=_, a!=b => _1<=suc_a b
  | {suc a}, {suc b}, suc<=suc a<=b, a!=b => Nat.suc<=suc (a<=b&a!=b=>a'<=b {a} {b} a<=b (\lam x => a!=b (pmap suc x)))